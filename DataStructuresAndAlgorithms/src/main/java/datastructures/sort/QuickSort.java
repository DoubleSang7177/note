package datastructures.sort;

/*
* 快速排序3.0
* 时间复杂度。。。O(N^2)?
* */
public class QuickSort {
    public static void quickSort(int[] arr) {
        if (arr == null || arr.length < 2) {
            return;
        }

        long start = System.nanoTime();
        process(arr, 0, arr.length - 1);
        long end = System.nanoTime();
        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();
        System.out.println(end - start);
        long start2 = System.nanoTime();
        process2(arr, 0, arr.length - 1);
        long end2 = System.nanoTime();

        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();
        System.out.println(end2 - start2);
        System.out.println((end2 - start2) < (end - start));

    }

    public static void process2(int arr[], int left, int right) {
        if (left < right) {
            swap(arr, left + (int) (Math.random() * (right - left + 1)), right);
            int[] points = partition2(arr, left, right);
            process2(arr, left, points[0] - 1);
            process2(arr, points[1] + 1, right);
        }

    }

    public static void process(int arr[], int left, int right) {
        if (left < right) {
            swap(arr, left + (int) (Math.random() * (right - left + 1)), right);
            int[] points = partition(arr, left, right);
            process(arr, left, points[0] - 1);
            process(arr, points[1] + 1, right);
        }
    }

    private static int[] partition2(int[] arr, int left, int right) {
        int l = left - 1;
        int r = right;
        while (left < r) {
            if (arr[left] < arr[right]) {
                swap(arr, ++l, left++);
            } else if (arr[left] > arr[right]) {
                swap(arr, left, --r);
            } else {
                left++;
            }
        }
        swap(arr, r, right);
        return new int[]{l + 1, r};
    }

    private static void swap2(int[] arr, int i, int j) {
        arr[i] = arr[i] ^ arr[j];
        arr[j] = arr[i] ^ arr[j];
        arr[i] = arr[i] ^ arr[j];
    }

    private static int[] partition(int[] arr, int left, int right) {
        int l = left;
        int r = right - 1;
        while (left <= r) {//快慢指针，由于left比l快，所以不用判断l是否小于r
            if (arr[left] < arr[right]) {
                swap(arr, l++, left++);
            } else if (arr[left] > arr[right]) {
                swap(arr, left, r--);
            } else {
                left++;
            }
        }
        swap(arr, ++r, right);
        return new int[]{l, r};
    }

    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    public static void main(String[] args) {
        int[] arr = {0,0,1,0,3,0,2,2,2,6,1,10,2,4,1,6,3,5,3,18,0,9,5,17,5,0,15,15,16,12,17,2,10,8,28,4,20,3,5,27,30,12,10,19,34,0,28,43,6,23,34,28,29,46,0,21,10,17,41,56,6,23,49,56,31,50,8,45,33,5,32,34,63,53,37,23,55,51,69,54,47,49,29,67,68,80,16,53,46,76,60,51,58,33,27,41,52,17,16,99,93,81,67,62,50,92,72,12,31,34,94,57,64,61,102,78,72,76,5,112,15,26,78,117,123,47,87,75,40,2,121,75,78,128,26,133,56,25,71,34,118,22,110,43,123,79,31,63,55,106,107,9,88,71,13,59,139,35,92,1,46,60,111,27,86,10,27,155,85,163,126,85,33,122,128,123,132,149,2,37,69,106,98,97,153,164,174,113,135,50,2,175,171,119,186,73,138,42,148,155,33,109,126,184,81,105,111,3,68,44,124,78,67,52,207,45,121,76,195,108,41,138,186,45,44,99,168,87,128,61,5,113,183,161,55,6,212,194,109,70,83,28,103,171,77,170,61,17,237,96,179,76,249,88,63,135,256,20,159,246,132,217,81,192,151,75,219,111,179,15,114,121,139,105,249,159,162,81,46,168,95,91,210,223,142,72,79,48,217,154,199,13,280,142,99,107,50,285,242,293,188,245,158,172,161,228,254,268,139,68,203,187,179,152,99,81,68,231,158,169,99,263,176,283,257,134,241,130,113,191,98,57,228,149,266,228,273,113,251,228,304,75,89,337,169,94,49,283,210,40,264,120,256,21,247,282,80,225,314,122,253,228,299,16,41,334,281,357,173,174,1,149,185,316,70,329,193,113,314,82,94,69,283,89,191,330,169,236,327,188,37,66,333,268,369,269,353,341,223,122,190,187,370,384,74,230,141,174,12,155,359,355,134,57,404,94,232,414,278,142,307,90,196,367,162,380,398,362,256,367,86,104,43,198,108,332,84,74,2,327,332,93,308,297,111,67,339,20,417,99,229,98,62,19,217,406,291,34,7,353,259,414,441,102,388,154,163,213,186,201,189,430,260,302,396,427,34,413,13,99,413,151,216,322,288,346,384,333,364,313,220,279,109,383,466,139,8,470,41,272,188,311,90,62,356,342,84,234,192,391,500,382,198,127,340,287,138,252,365,36,55,71,73,300,95,399,276,409,269,415,360,468,230,398,418,344,128,316,518,320,410,323,464,277,135,324,401,364,62,130,147,169,122,112,237,243,465,417,254,238,483,467,87,524,312,375,447,282,88,72,125,333,285,173,5,361,280,58,314,136,332,248,391,508,475,273,325,120,199,95,214,428,78,575,6,74,250,366,468,183,86,393,303,306,14,484,538,117,332,146,486,489,28,514,276,559,456,222,337,56,38,87,482,334,453,400,525,289,409,95,320,470,456,23,293,557,549,370,5,68,293,135,193,348,152,369,400,613,65,560,168,603,255,265,55,547,240,558,582,545,231,323,333,636,323,426,318,143,170,322,175,137,643,493,523,297,638,436,184,319,304,443,344,288,315,666,345,665,527,486,180,446,21,485,567,155,296,257,87,573,385,263,135,370,552,397,609,556,70,416,362,336,124,668,620,147,72,387,180,111,369,403,631,123,264,54,303,478,663,644,721,433,695,48,536,11,646,542,389,138,730,277,534,54,640,187,552,147,16,100,408,309,179,211,618,645,488,238,452,664,135,635,556,543,491,42,484,447,121,569,471,176,428,267,468,476,271,380,380,327,512,103,311,473,780,632,639,205,614,522,375,286,144,604,221,277,482,278,593,331,598,286,467,126,408,488,737,47,671,314,623,350,22,546,33,116,78,419,800,300,102,668,344,544,464,764,562,555,581,538,323,700,154,410,777,485,164,719,806,593,300,171,129,664,139,351,32,227,762,542,356,731,343,37,462,806,19,635,362,51,641,150,653,67,218,498,668,171,110,712,239,145,189,718,636,279,33,362,178,693,534,648,661,5,0,870,187,661,792,852,105,616,196,852,601,138,50,626,32,843,49,628,842,449,864,601,2,331,449,756,517,267,503,852,417,712,410,425,461,257,462,151,19,604,121,339,518,690,485,479,573,414,302,303,73,878,909,52,470,868,487,931,833,59,699,883,376,246,86,375,937,563,834,922,523,294,82,672,444,817,90,195,876,453,239,670,623,297,795,943,872,884,772,850,45,158,354,174,621,102,858,802,833,11,763,839,190,850,380,936,896,634,574,78,782,392,555,790,290,608};
        //        int[] arr={7,9,5,9,5,4,5,0};
        quickSort(arr);
       /* for (int i : arr) {
            System.out.printEdge(i + " ");
        }*/

    }
}
